/*
 * generated by Xtext 2.15.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDsl2GrammarAccess extends AbstractGrammarElementFinder {
	
	public class MainModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl2.MainModel");
		private final Assignment cSeasonsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSeasonsSeasonParserRuleCall_0 = (RuleCall)cSeasonsAssignment.eContents().get(0);
		
		//MainModel:
		//	seasons+=Season*;
		@Override public ParserRule getRule() { return rule; }
		
		//seasons+=Season*
		public Assignment getSeasonsAssignment() { return cSeasonsAssignment; }
		
		//Season
		public RuleCall getSeasonsSeasonParserRuleCall_0() { return cSeasonsSeasonParserRuleCall_0; }
	}
	public class SeasonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl2.Season");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cThis_isKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAltAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAltListParserRuleCall_1_0 = (RuleCall)cAltAssignment_1.eContents().get(0);
		
		//Season:
		//	"This_is" alt=List;
		@Override public ParserRule getRule() { return rule; }
		
		//"This_is" alt=List
		public Group getGroup() { return cGroup; }
		
		//"This_is"
		public Keyword getThis_isKeyword_0() { return cThis_isKeyword_0; }
		
		//alt=List
		public Assignment getAltAssignment_1() { return cAltAssignment_1; }
		
		//List
		public RuleCall getAltListParserRuleCall_1_0() { return cAltListParserRuleCall_1_0; }
	}
	public class ListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl2.List");
		private final Assignment cAltAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cAltAlternatives_0 = (Alternatives)cAltAssignment.eContents().get(0);
		private final Keyword cAltSpringKeyword_0_0 = (Keyword)cAltAlternatives_0.eContents().get(0);
		private final Keyword cAltSummerKeyword_0_1 = (Keyword)cAltAlternatives_0.eContents().get(1);
		private final Keyword cAltAutumnKeyword_0_2 = (Keyword)cAltAlternatives_0.eContents().get(2);
		private final Keyword cAltWinterKeyword_0_3 = (Keyword)cAltAlternatives_0.eContents().get(3);
		
		//List:
		//	alt=('Spring' | 'Summer' | 'Autumn' | 'Winter');
		@Override public ParserRule getRule() { return rule; }
		
		//alt=('Spring' | 'Summer' | 'Autumn' | 'Winter')
		public Assignment getAltAssignment() { return cAltAssignment; }
		
		//('Spring' | 'Summer' | 'Autumn' | 'Winter')
		public Alternatives getAltAlternatives_0() { return cAltAlternatives_0; }
		
		//'Spring'
		public Keyword getAltSpringKeyword_0_0() { return cAltSpringKeyword_0_0; }
		
		//'Summer'
		public Keyword getAltSummerKeyword_0_1() { return cAltSummerKeyword_0_1; }
		
		//'Autumn'
		public Keyword getAltAutumnKeyword_0_2() { return cAltAutumnKeyword_0_2; }
		
		//'Winter'
		public Keyword getAltWinterKeyword_0_3() { return cAltWinterKeyword_0_3; }
	}
	
	
	private final MainModelElements pMainModel;
	private final SeasonElements pSeason;
	private final ListElements pList;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDsl2GrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pMainModel = new MainModelElements();
		this.pSeason = new SeasonElements();
		this.pList = new ListElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl2".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//MainModel:
	//	seasons+=Season*;
	public MainModelElements getMainModelAccess() {
		return pMainModel;
	}
	
	public ParserRule getMainModelRule() {
		return getMainModelAccess().getRule();
	}
	
	//Season:
	//	"This_is" alt=List;
	public SeasonElements getSeasonAccess() {
		return pSeason;
	}
	
	public ParserRule getSeasonRule() {
		return getSeasonAccess().getRule();
	}
	
	//List:
	//	alt=('Spring' | 'Summer' | 'Autumn' | 'Winter');
	public ListElements getListAccess() {
		return pList;
	}
	
	public ParserRule getListRule() {
		return getListAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
