/*
 * generated by Xtext 2.15.0
 */
grammar InternalMyDsl2;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.MyDsl2GrammarAccess;

}

@parser::members {

 	private MyDsl2GrammarAccess grammarAccess;

    public InternalMyDsl2Parser(TokenStream input, MyDsl2GrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "MainModel";
   	}

   	@Override
   	protected MyDsl2GrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleMainModel
entryRuleMainModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMainModelRule()); }
	iv_ruleMainModel=ruleMainModel
	{ $current=$iv_ruleMainModel.current; }
	EOF;

// Rule MainModel
ruleMainModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getMainModelAccess().getSeasonsSeasonParserRuleCall_0());
			}
			lv_seasons_0_0=ruleSeason
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getMainModelRule());
				}
				add(
					$current,
					"seasons",
					lv_seasons_0_0,
					"org.xtext.example.mydsl.MyDsl2.Season");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleSeason
entryRuleSeason returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSeasonRule()); }
	iv_ruleSeason=ruleSeason
	{ $current=$iv_ruleSeason.current; }
	EOF;

// Rule Season
ruleSeason returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='This_is'
		{
			newLeafNode(otherlv_0, grammarAccess.getSeasonAccess().getThis_isKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSeasonAccess().getAltListParserRuleCall_1_0());
				}
				lv_alt_1_0=ruleList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSeasonRule());
					}
					set(
						$current,
						"alt",
						lv_alt_1_0,
						"org.xtext.example.mydsl.MyDsl2.List");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleList
entryRuleList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getListRule()); }
	iv_ruleList=ruleList
	{ $current=$iv_ruleList.current; }
	EOF;

// Rule List
ruleList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_alt_0_1='Spring'
				{
					newLeafNode(lv_alt_0_1, grammarAccess.getListAccess().getAltSpringKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getListRule());
					}
					setWithLastConsumed($current, "alt", lv_alt_0_1, null);
				}
				    |
				lv_alt_0_2='Summer'
				{
					newLeafNode(lv_alt_0_2, grammarAccess.getListAccess().getAltSummerKeyword_0_1());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getListRule());
					}
					setWithLastConsumed($current, "alt", lv_alt_0_2, null);
				}
				    |
				lv_alt_0_3='Autumn'
				{
					newLeafNode(lv_alt_0_3, grammarAccess.getListAccess().getAltAutumnKeyword_0_2());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getListRule());
					}
					setWithLastConsumed($current, "alt", lv_alt_0_3, null);
				}
				    |
				lv_alt_0_4='Winter'
				{
					newLeafNode(lv_alt_0_4, grammarAccess.getListAccess().getAltWinterKeyword_0_3());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getListRule());
					}
					setWithLastConsumed($current, "alt", lv_alt_0_4, null);
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
